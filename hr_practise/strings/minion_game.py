"""Minion game problem.

Kevin and Stuart want to play the 'The Minion Game'.

Game Rules

Both players are given the same string, S.
Both players have to make substrings using the letters of the string S.
Stuart has to make words starting with consonants.
Kevin has to make words starting with vowels.
The game ends when both players have made all possible substrings.

Scoring
A player gets +1 point for each occurrence of the substring in the string S.

For Example:
String S = BANANA
Kevin's vowel beginning word = ANA
Here, ANA occurs twice in BANANA. Hence, Kevin will get 2 Points.

The task is to determine the winner of the game and their score.
"""

# THIS CODE FAILS FOR THE INPUT PASTED AT THE BOTTOM OF THIS FILE.

VOWELS = ['A', 'E', 'I', 'O', 'U']

def minion_game(string):
    """Get the winner name and their score or Draw if there is no winner."""
    kevin_words = {}
    stuart_words = {}
    kevin_score = 0
    stuart_score = 0
    for i in range(len(string)):
        # Check the character is a vowel.
        if string[i] in VOWELS:
            # Check if the character has a entry in Kevin's dictionary.
            if string[i] in kevin_words.keys():
                kevin_sub_string = ''
                # If present, increase the score.
                for j in range(i, len(string)):
                    kevin_sub_string = kevin_sub_string + string[j]
                    if kevin_sub_string in kevin_words.keys():
                        kevin_words[kevin_sub_string] += 1
                    else:
                        kevin_words[kevin_sub_string] = 1
            else:
                # Add the character as an entry in Kevin's dictionary.
                kevin_sub_string = ''
                for j in range(i, len(string)):
                    kevin_sub_string = kevin_sub_string + string[j]
                    if kevin_sub_string in kevin_words.keys():
                        kevin_words[kevin_sub_string] += 1
                    else:
                        kevin_words[kevin_sub_string] = 1
        else:
            # Check if the character has an entry in Stuart's dictionary.
            if string[i] in stuart_words.keys():
                # If present, increase the score.
                stuart_sub_string = ''
                for j in range(i, len(string)):
                    stuart_sub_string = stuart_sub_string + string[j]
                    if stuart_sub_string in stuart_words.keys():
                        stuart_words[stuart_sub_string] += 1
                    else:
                        stuart_words[stuart_sub_string] = 1
            else:
                # Add the character as an entry in Stuart's dictionary.
                stuart_sub_string = ''
                for j in range(i, len(string)):
                    stuart_sub_string = stuart_sub_string + string[j]
                    if stuart_sub_string in stuart_words.keys():
                        stuart_words[stuart_sub_string] += 1
                    else:
                        stuart_words[stuart_sub_string] = 1
    for k in kevin_words.values():
        kevin_score += k
    for s in stuart_words.values():
        stuart_score += s
    if kevin_score > stuart_score:
        return 'Kevin' + ' ' + str(kevin_score)
    if kevin_score < stuart_score:
        return 'Stuart' + ' ' + str(stuart_score)
    if kevin_score == stuart_score:
        # For input BANANANAAAS
        return 'Draw'


if __name__ == '__main__':
    s = input()
    print(minion_game(s))


'''***** TEST DATA ****


OUTPUT: Stuart 7501500
'''